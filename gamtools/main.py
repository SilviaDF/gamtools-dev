from .matrix import input_formats, output_formats
from . import cosegregation
from wrapit.parser import add_doit_options

import argparse

parser = argparse.ArgumentParser(
    description='GAMtools is a suite of tools for working with Genome'
    ' Architecture Mapping (GAM) data.')

subparsers = parser.add_subparsers(help='Please select a command:')

# Options for the 'call_windows' command

call_windows_parser = subparsers.add_parser(
    'call_windows',
    help='Call positive windows for individual NPs')

call_windows_parser.add_argument(
    'coverage_file', metavar='COVERAGE_FILE',
    help='Input coverage file generated by bedtools multibamcov')

# If --macs is specified, we don't need to plot the fits
seg_method = call_windows_parser.add_mutually_exclusive_group()
seg_method.add_argument(
    '-f', '--fitting-folder', metavar='FITTING_FOLDER', default=False,
    help='If specified, save the individual curve fittings to this folder')
seg_method.add_argument(
    '-m', '--macs', action='store_true',
    help='If specified, use MACS to call positive windows')


# Options for the 'convert' command

convert_parser = subparsers.add_parser(
    'convert',
    help='Convert between different GAM matrix formats')

convert_parser.add_argument(
    'matrix_file', metavar='INPUT_MATRIX',
    help='Input matrix file to convert')

convert_parser.add_argument(
    '-i', '--input-format', metavar='INPUT_FORMAT',
    choices=input_formats, required=True,
    help='Input matrix file format (choose from: {})'.format(
        ', '.join(input_formats.keys())))

convert_parser.add_argument(
    '-f', '--output-format', metavar='OUTPUT_FORMAT',
    choices=output_formats, required=True,
    help='Output matrix file format (choose from: {})'.format(
        ', '.join(output_formats.keys())))

convert_parser.add_argument(
    '-o', '--output-file', metavar='OUTPUT_FILE',
    help='Output matrix file. If not specified, new file will have the '
    'same name as the input file, but with a different extension')

convert_parser.add_argument(
    '-t', '--threshold', metavar='THRESHOLD_FILE',
    help='Threshold file. If specified, any values lower than the specified'
    ' threshold will be excluded from the output file')


# Options for the 'enrichment' command

enrichment_parser = subparsers.add_parser(
    'enrichment',
    help='Calculate enrichments of SLICE interactions')

enrichment_parser.add_argument(
    '-i', '--interactions-file', required=True,
    help='A file containing all pairwise interactions between genomic windows')

enrichment_parser.add_argument(
    '-c', '--classes-file', required=True,
    help='A file containing classes assigned to each genomic window')

enrichment_parser.add_argument(
    '-o', '--output-filename', default='permutation_enrichment_results',
    help='First part of the output file name')

# Either permuting the data or not permuting must be specified
perm_type = enrichment_parser.add_mutually_exclusive_group(required=True)
perm_type.add_argument(
    '-p', '--permutations', default=10, type=int,
    help='Number of times to randomly permute the input file')
perm_type.add_argument(
    '-n', '--no-permute', action='store_true',
    help='Do not permute the input file, instead calculate observed counts')


# Options for the 'matrix' command

matrix_parser = subparsers.add_parser(
    'matrix',
    help='Generate a GAM matrix from a segmentation file')

matrix_parser.add_argument(
    '-r', '--region', metavar='REGION', required=True, nargs='+',
    help='Specific genomic regions to calculate matrices for. '
    'If one region is specified, a matrix is calculated for that region '
    'against itself. If more than one region is specified, a matrix is '
    'calculated for each region against the other. Regions are specified '
    'using UCSC browser syntax, i.e. "chr4" for the whole of chromosome '
    '4 or "chr4:100000-200000" for a sub-region of the chromosome.')

matrix_parser.add_argument(
    '-s', '--segmentation_file', required=True,
    help='A segmentation file to use as input')

matrix_parser.add_argument(
    '-f', '--output-format', metavar='OUTPUT_FORMAT',
    choices=output_formats, default='npz',
    help='Output matrix file format (choose from: {}, default is npz)'.format(
        ', '.join(output_formats.keys())))

matrix_parser.add_argument(
    '-t', '--matrix-type', default='dprime',
    choices=cosegregation.methods,
    help='Method used to calculate the interaction matrix (choose from: '
    '{})'.format(', '.join(cosegregation.methods.keys())))

matrix_parser.add_argument(
    '-o', '--output-file', metavar='OUTPUT_FILE',
    help='Output matrix file. If not specified, new file will have the '
    'same name as the segmentation file and an extension indicating the '
    'genomic region(s) and the matrix method')


# TODO: add Markus' matrix permutation code
"""
# Options for 'permute_matrix' command

permute_matrix_parser = subparsers.add_parser(
    'permute_matrix',
    help='Circularly permute a GAM matrix')

"""


# Options for 'permute_segmentation' command

permute_seg_parser = subparsers.add_parser(
    'permute_segmentation',
    help='Circularly permute a GAM segmentation file')

permute_seg_parser.add_argument(
    '-s', '--segmentation_file', required=True,
    help='A segmentation file to use as input')

permute_seg_parser.add_argument(
    '-o', '--output-file', metavar='OUTPUT_FILE', required=True,
    help='Output matrix file.')


# Options for 'plot_np' command

plot_np_parser = subparsers.add_parser(
    'plot_np',
    help='Plot the segmentation results for a particular NP')

plot_np_parser.add_argument(
    '-w', '--bigwig_file', required=True,
    help='A bigwig file containing coverage information for the NP')
plot_np_parser.add_argument(
    '-b', '--bigbed_file', required=True,
    help='A bigbed file containing segmentation information for the NP')
plot_np_parser.add_argument(
    '-s', '--sizes_file', required=True,
    help='A file containing chromosome sizes for this genome')
plot_np_parser.add_argument(
    '-o', '--output_file', required=True, help='Output image file to create')


# Options for 'process' command

process_parser = subparsers.add_parser(
    'process',
    help='Run a pipeline for mapping raw GAM sequencing data and '
    'calling positive windows')

process_parser.add_argument(
    'input_fastqs', metavar='INPUT_FASTQ', nargs='+',
    help='One or more input fastq files.')
process_parser.add_argument(
    '-g', '--genome_file', metavar='GENOME_FILE', required=True,
    help='File containing chromosome names and lengths')
process_parser.add_argument(
    '-o', '--output_dir', metavar='OUPUT_DIRECTORY',
    help='Write segmentation, matrix etc. to this directory')
process_parser.add_argument(
    '-f', '--fittings_dir', metavar='FITTINGS_DIR',
    help='Write segmentation curve fitting plots to this directory')
process_parser.add_argument(
    '-i', '--bigwigs', action='append_const',
    dest='to_run', const='Converting bedgraph to bigwig',
    help='Make bigWig files.')
process_parser.add_argument(
    '-b', '--bigbeds', action='append_const',
    dest='to_run', const='Getting segmentation bigBed',
    help='Make bed files of positive windows')
process_parser.add_argument(
    '-c', '--do-qc', action='append_const',
    dest='to_run', const='do_qc',
    help='Perform sample quality control.')
process_parser.add_argument(
    '-w', '--window-sizes', metavar='WINDOW_SIZE',
    default=[50000], type=int, nargs='+',
    help='One or more window sizes for calling positive windows')
process_parser.add_argument(
    '-m', '--calculate-matrices', action='append_const',
    dest='to_run', const='Calculating linkage matrix',
    help='Calculate linkage matrices.')
process_parser.add_argument(
    '-s', '--matrix-sizes', metavar='MATRIX_SIZE',
    default=[], type=int, nargs='+',
    help='Resolutions for which linkage matrices should be produced.')
process_parser.add_argument(
    '--qc-window-size', type=int,
    help='Use this window size for qc (default is median window size).')
process_parser.add_argument(
    '--additional-qc-files', nargs='*', default=[],
    help='Any additional qc files to filter on')
process_parser.add_argument(
    '-q', '--minimum-mapq', metavar='MINIMUM_MAPQ', default=20, type=int,
    help='Filter out any mapped read with a mapping quality less than x '
    '(default is 20, use -q 0 for no filtering)')

# Add options for doit, the task runner engine (www.pydoit.org)
add_doit_options(process_parser,
                 ['dep_file', 'backend', 'verbosity',
                  'reporter', 'num_process', 'par_type'])

# Options for 'segmentation_stats' command

seg_stats_parser = subparsers.add_parser(
    'segmentation_stats',
    help='Calculate QC statistics from a segmentation file')

seg_stats_parser.add_argument(
    '-s', '--sizes_file', required=True,
    help='A file containing chromosome sizes for this genome')


# Options for 'select' command

select_parser = subparsers.add_parser(
    'select',
    help='Select only certain samples from a segmentation file')

select_parser.add_argument(
    '-s', '--segmentation-file', metavar='SEGMENTATION_FILE', required=True,
    help='A file containing the segmentation of all samples')
select_parser.add_argument(
    '-d', '--keep-good', action='store_true',
    help='Keep only the listed samples (default: discard listed samples)')
select_parser.add_argument(
    '-n', '--sample-names', metavar='SAMPLE_NAME',
    required=True, nargs='*', help='Names of the samples to remove')

def main():
    parser.parse_args()
    

if __name__ == '__main__':
    main()
